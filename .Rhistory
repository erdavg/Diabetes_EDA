ggplot(data = data) +
geom_bar(mapping = aes(x = Especie))
ggplot(data = data) +
geom_histogram(mapping = aes(x = Longitud.total), binwidth = 5.0)
data %>%
count(cut_width(Longitud.total, 5.0))
##SOLO DATOS NUMERICOS
data_numericos <- na.omit(select(data, Longitud.total, Longitud.cola, Longitud.pata, Longitud.oreja, Longitud.antebrazo, Peso))
cor(data_numericos)
data1 <- scale(data_numericos)
data1 <- scale(data_numericos)
pca <- princomp(data1)
## PCA CON factoextra
pca <- prcomp(data_numericos, scale = TRUE)
##SCREE PLOT
fviz_eig(pca) ## Con codo
fviz_eig(pca, choice = "eigenvalue") ## con eigenvalue
fviz_pca_ind(pca,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE #Avoid text overlapping
)
pca <- princomp(data1)
plot3d(pca$scores) ## Con pca nativo
fviz_pca_var(pca,
col.var = "contrib", #Color by contributions
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE #Avoid text overlapping
)
fviz_pca_biplot(pca, repel = TRUE,
col.var = "#2E9FDF", #Variables color
col.ind = "#696969" #Individuals color
)
k1 <- kmeansruns(data1, k=2, runs = 100)
k1 <- kmeansruns(data1, k=2, runs = 100)
fviz_cluster(k1, data=data1)
plot3d(pca$scores[,c(1:3)], col =k1$cluster)
plot3d(pca$scores[,c(1:2)], col =k1$cluster)
plot3d(pca$scores[,c(1:3)], col =k1$cluster)
plot3d(pca$scores[,c(1:2)], col =k1$cluster)
data_numericos$cluster <- k1$cluster
ggplot(data_numericos, aes(x = factor(cluster), y = Peso, fill = factor(cluster)))+ geom_boxplot()+
theme_classic() + stat_compare_means(method = "kruskal.test") ##ggpubr para kruskal
eig.val <- get_eigenvalue(pca)
eig.val
## Results for variables
res.var <- get_pca_var(pca)
res.var
res.var$coord
ggplot(data_numericos, aes(x = factor(cluster), y = Longitud.antebrazo, fill = factor(cluster)))+ geom_boxplot()+
theme_classic() + stat_compare_means(method = "kruskal.test") ##ggpubr para kruskal
antebrazo_mas60 <-  data_numericos %>%
filter(data_numericos$Longitud.antebrazo=>60)
antebrazo_mas60 <-  data_numericos %>%
filter(Longitud.antebrazo=>60)
antebrazo_mas60 <-  data_numericos %>%
filter(Longitud.antebrazo >=60)
antebrazo_mas60
antebrazo_mas60 <-  data %>%
filter(Longitud.antebrazo >=60)
View(antebrazo_mas60)
antebrazo_menos45 <-  data %>%
filter(Longitud.antebrazo <=45)
View(antebrazo_menos45)
antebrazo_menos45 <-  data %>%
filter(Longitud.antebrazo <=44)
View(antebrazo_menos45)
##SOLO DATOS NUMERICOS
rownames(data) <- data$Sitio
##SOLO DATOS NUMERICOS
rownames(data) <- data$Red
View(data)
##SOLO DATOS NUMERICOS
transpuesta <- t(data)
transpuesta
View(transpuesta)
install.packages("nnet")
r.version()
R --version
R.Version()$version.string
install.packages("nnet")
install.packages("nnet")
library(ithir)
install.packages(c("ithir", "sp", "raster", "rgdal"))
library(sp)
library(rgdal)
library(raster)
data(HV100)
(ithir)
library(ithir)
install.packages("ithir")
library(ithir)
data(HV100)
str(HV100)
coordinates(HV100) <- ~ x + y
str(HV100)
ssplot(HV100, "OC", scales = list(draw = T), cuts = 5,
col.regions = bpy.colors(cutoff.tails = 0.1,
alpha = 1), cex = 1)
spplot(HV100, "OC", scales = list(draw = T), cuts = 5,
col.regions = bpy.colors(cutoff.tails = 0.1,
alpha = 1), cex = 1)
proj4string(HV100) <- CRS("+intit=espg:32756")
proj4string(HV100) <- CRS("+intit=epsg:32756")
HV100@proj4string
proj4string(HV100) <- CRS("+intit=epsg:32756")
writeOGR(HV100, ".", "HV_dat_shape", "ESRI Shapefile")
?HV100
?ithir
??HV100
??HV100
??ithir
writeOGR(HV100.11, "HV100.kml", "ID", "KML")
HV100.11 <- spTransform(HV100, CRS("init=epsg:4326"))
HV100.11 <- spTransform(HV100, CRS("init=epsg:4326"))
writeOGR(HV100.11, "HV100.kml", "ID", "KML")
HV100.ll <- spTransform(HV100, CRS("init=epsg:4326"))
writeOGR(HV100.11, "HV100.kml", "ID", "KML")
HV100_ll <- spTransform(HV100, CRS("init=epsg:4326"))
writeOGR(HV100.11, "HV100.kml", "ID", "KML")
HV100_ll <- spTransform(HV100, CRS("init=epsg:4326"))
writeOGR(HV100_11, "HV100.kml", "ID", "KML")
HV100_ll <- spTransform(HV100, CRS("+init=epsg:4326"))
writeOGR(HV100_ll, "HV100.kml", "ID", "KML")
HV100.ll <- spTransform(HV100, CRS("+init=epsg:4326"))
writeOGR(HV100.ll, "HV100.kml", "ID", "KML")
library(ithir)
library(sp)
library(rgdal)
library(raster)
HV100.ll <- spTransform(HV100, CRS("+init=epsg:4326"))
imp.HV.dat <- readOGR(".", "HV_dat_shape")
install.packages(c("sf", "terra"))
library(sf)
library(terra)
HV100.ll <- spTransform(HV100, CRS("+init=epsg:4326"))
imp.HV.dat <- readOGR(".", "HV_dat_shape")
library(ithir)
library(sp)
library(rgdal)
library(raster)
library(sf)
library(terra)
HV100.ll <- spTransform(HV100, CRS("+init=epsg:4326"))
imp.HV.dat <- readOGR(".", "HV_dat_shape")
proj4string(HV100) <- CRS("+init=epsg:32756")
HV100@proj4string
writeOGR(HV100, ".", "HV_dat_shape", "ESRI Shapefile")
writeOGR(HV100, "Documentos", "HV_dat_shape", "ESRI Shapefile")
writeOGR(HV100, "Documentos", "HV_dat_shape", "ESRI Shapefile")
writeOGR(HV100, ".", "HV_dat_shape", "ESRI Shapefile")
HV100.ll <- spTransform(HV100, CRS("+init=epsg:4326"))
imp.HV.dat <- readOGR(".", "HV_dat_shape")
HV100.ll <- spTransform(HV100, CRS("+init=epsg:4326"))
writeOGR(HV100.ll, "HV100.kml", "ID", "KML")
imp.HV.dat <- readOGR(".", "HV_dat_shape")
hola <- set.seed(10)
print(hola)
str(hola)
hola <- set.seed(10)
str(hola)
library(tidyverse)
list.files()
data <- read.csv("Marijuana_Arrests.csv" )
str(data)
hist(data)
hist(data$age)
hist(data$AGE)
min(data$AGE)
min(omit.na(data$AGE))
max(data$AGE)
max_age <- max(na.omit(data$AGE))
print(max_age)
min_age <- min(na.omit(data$AGE))
prin(min_age)
print(min_age)
hist(data$SEX)
plot(data$SEX,data$AGE)
boxplot(data$SEX,data$AGE)
boxplot(data$SEX,data$AGE)
boxplot(data$AGE, data$SEX)
boxplot(data$SEX, data$AGE)
hist(data$SEX)
library(tidyverse)
library(skimr)
library(janitor)
library(ggplot2)
library(dplyr)
library(naniar)
library(mice)
library(GGally)
library(reshape)
library(scatterplot3d)
library(factoextra)
library(FactoMineR)
library(rgl)
library(fpc)
library(coin)
library(rstatix)
library(ggpubr)
data <- read.csv("MurcielagosLimpio.csv")
head(data)
str(data)
unique(data$Especie)
lapply(data, class)
## Contar los NA
sum(is.na(data))
sum(is.na(data))
data <- read.csv("Marijuana_Arrests.csv" )
(is.na(data))
sum(is.na(data))
hist(data$AGE)
hist(data$SEX)
barplot(data$SEX)
# Calcular la frecuencia de cada categoría
sex_counts <- table(data$SEX)
# Crear el gráfico de barras
barplot(sex_counts)
unique(data$SEX)
source("~/.active-rstudio-document", echo=TRUE)
category_counts <- table(data$CATEGORY)
barplot(category_counts)
type_counts <- table(data$TYPE)
barplot(type_counts)
head(data$TYPE)
unique(data$TYPE)
library(ithir)
library(sp)
library(rgdal)
library(raster)
library(sf)
library(terra)
data(HV100)
str(HV100)
coordinates(HV100) <- ~ x + y
str(HV100)
spplot(HV100, "OC", scales = list(draw = T), cuts = 5,
col.regions = bpy.colors(cutoff.tails = 0.1,
alpha = 1), cex = 1)
proj4string(HV100) <- CRS("+init=epsg:32756")
HV100@proj4string
writeOGR(HV100, ".", "HV_dat_shape", "ESRI Shapefile")
HV100.ll <- spTransform(HV100, CRS("+init=epsg:4326"))
writeOGR(HV100.ll, "HV100.kml", "ID", "KML")
imp.HV.dat <- readOGR(".", "HV_dat_shape")
imp.HV.dat@proj4string
###RASTERS
data(HV_dem)
str(HV_dem)
r.DEM <- rasterFromXYZ(HV_dem)
proj4string(r.DEM) <- CRS("+init=epsg:32756")
plot(r.DEM)
points(HV100, pch = 20)
writeRaster(r.DEM, filename = "HV_dem100.asc",
format = "ascii", overwrite = TRUE)
p.r.DEM <- projectRaster(r.DEM, crs = "+init=epsg:4326",
method = "bilinear")
KML(p.r.DEM, "HV_DEM.kml", col = rev(terrain.colors(255)),
overwrite = TRUE)
read.grid <- readGDAL("HV_dem100.asc")
grid.dem <- raster(read.grid)
grid.dem
grid.dem <- raster(paste(paste(getwd(), "/", sep = ""),
"HV_dem100.asc", sep = ""))
grid.dem
library(rgdal)
library(raster)
library(sf)
imp.HV.dat <- readOGR(".", "15a")
imp_15a <- readOGR(".", "15a")
imp_15a@proj4string
str(imp_15a)
library("tidyverse")
library("lubridate")
today()
now()
## Paso 2: Ver Datos
head(diamonds)
str(diamonds)
glimpse(diamonds)
## Nombres de columnas
colnames(diamonds)
## Renombrar columna
rename(diamonds, carat_new = carat)
## Se puede renombrar mas de una variable
rename(diamonds, carat_new = carat, cut_new = cut)
## Resumen de Datos y saber media de datos
summarize(diamonds, mean_carat = mean(carat))
## Resumen de tabla de Datos
summary(diamonds)
## Paso 4: Visualizar Datos
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point()
## Cambiar el color que representa cada variable, ejemplo: el color de cada corte del diamante
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
geom_point()
## Separar grafica por componentes
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
geom_point() +
facet_wrap(~cut)
## Pipes
data("ToothGrowth")
## Filtrar y organizar datos con dplyr
filtered_tg <- filter(ToothGrowth, dose==0.5)
## Acomodar la informacion emodo ascendente con los datos filtrados anteriormente
arrange(filtered_tg, len)
## Nested function: funcion contenida en otra funcion
## Shortcut para poner un pipe ctrl + shit + M
filtered_tooththgrowth <- ToothGrowth %>%
filter(dose==0.5) %>%
arrange(len)
source("~/Google_week3_WorkingWithData.R", echo=TRUE)
library(tidyverse)
list.files()
data <- read.csv("Marijuana_Arrests.csv" )
data <- read.csv("Marijuana_Arrests.csv")
library(tidyverse)
list.files()
data <- read.csv("Marijuana_Arrests.csv")
setwd("C:/Users/erdav/Documents")
data <- read.csv("Marijuana_Arrests.csv")
data <- read.csv("Marijuana_Arrests.csv")
getwd()
setwd("C:/Users/erdav/Documents")
data <- read.csv("Marijuana_Arrests.csv")
install.packages("readxl")
library(readxl)
data <- read_excel("Marijuana_Arrests.csv")
data <- read.csv("Marijuana_Arrests.csv")
data <- read.csv("Marijuana_Arrests.csv", encoding = "UTF-8")
install.packages(c("BiodiversityR", "broom", "bslib", "cachem", "checkmate", "clock", "curl", "DEoptimR", "dismo", "dplyr", "DT", "emmeans", "evaluate", "fontawesome", "fs", "future.apply", "gargle", "ggstatsplot", "googledrive", "googlesheets4", "Hmisc", "httpuv", "httr", "httr2", "igraph", "insight", "jsonlite", "knitr", "Lahman", "later", "lme4", "lwgeom", "markdown", "matrixStats", "mice", "mvtnorm", "norm", "parallelly", "parameters", "performance", "plotly", "pROC", "processx", "profvis", "ps", "RcppArmadillo", "recipes", "rgdal", "rgeos", "rlang", "rmarkdown", "s2", "sass", "scatterplot3d", "SimDesign", "sp", "statsExpressions", "survey", "sys", "testthat", "tinytex", "tzdb", "usethis", "vctrs", "viridis", "viridisLite", "vroom", "waldo", "wk", "xfun", "xml2", "xts", "zip", "zoo"))
install.packages(c("BiodiversityR", "broom", "bslib", "cachem", "checkmate", "clock", "curl", "DEoptimR", "dismo", "dplyr", "DT", "emmeans", "evaluate", "fontawesome", "fs", "future.apply", "gargle", "ggstatsplot", "googledrive", "googlesheets4", "Hmisc", "httpuv", "httr", "httr2", "igraph", "insight", "jsonlite", "knitr", "Lahman", "later", "lme4", "lwgeom", "markdown", "matrixStats", "mice", "mvtnorm", "norm", "parallelly", "parameters", "performance", "plotly", "pROC", "processx", "profvis", "ps", "RcppArmadillo", "recipes", "rgdal", "rgeos", "rlang", "rmarkdown", "s2", "sass", "scatterplot3d", "SimDesign", "sp", "statsExpressions", "survey", "sys", "testthat", "tinytex", "tzdb", "usethis", "vctrs", "viridis", "viridisLite", "vroom", "waldo", "wk", "xfun", "xml2", "xts", "zip", "zoo"))
install.packages(c("BiodiversityR", "broom", "bslib", "cachem", "checkmate", "clock", "curl", "DEoptimR", "dismo", "dplyr", "DT", "emmeans", "evaluate", "fontawesome", "fs", "future.apply", "gargle", "ggstatsplot", "googledrive", "googlesheets4", "Hmisc", "httpuv", "httr", "httr2", "igraph", "insight", "jsonlite", "knitr", "Lahman", "later", "lme4", "lwgeom", "markdown", "matrixStats", "mice", "mvtnorm", "norm", "parallelly", "parameters", "performance", "plotly", "pROC", "processx", "profvis", "ps", "RcppArmadillo", "recipes", "rgdal", "rgeos", "rlang", "rmarkdown", "s2", "sass", "scatterplot3d", "SimDesign", "sp", "statsExpressions", "survey", "sys", "testthat", "tinytex", "tzdb", "usethis", "vctrs", "viridis", "viridisLite", "vroom", "waldo", "wk", "xfun", "xml2", "xts", "zip", "zoo"))
library(tidyverse)
list.files()
getwd()
setwd("C:/Users/erdav/Documents")
data <- read.csv("Marijuana_Arrests.csv", encoding = "UTF-8")
data <- read.csv("Marijuana_Arrests.csv")
R.version
head(data)
type(data$DATETIME)
type(data$TYPE)
str(data)
ggplot(data = data, aes(x = age, y = race, color = sex)) +
geom_point()
ggplot(data = data, aes(x = data$AGE, y = data$RACE, color = data$SEX)) +
geom_point()
ggplot(data = data, aes(x = data$AGE, y = data$RACE, color = data$SEX)) +
geom_bar()
ggplot(data = data, aes(x = data$AGE, y = data$RACE, color = data$SEX)) +
geom_boxplot()
library(tidyverse)
list.files()
data <- read.csv("bdmir.csv")
data <- read.csv("bdmir.csv")
library(tidyverse)
list.files()
data <- read.csv("bdmir.csv")
data <- read.csv("bdmir.csv")
install.packages(c("BiodiversityR", "broom", "bslib", "cachem", "checkmate", "clock", "curl", "DEoptimR", "dismo", "dplyr", "DT", "emmeans", "evaluate", "fontawesome", "fs", "future.apply", "gargle", "ggstatsplot", "googledrive", "googlesheets4", "Hmisc", "httpuv", "httr", "httr2", "igraph", "insight", "jsonlite", "knitr", "Lahman", "later", "lme4", "lwgeom", "markdown", "matrixStats", "mice", "mvtnorm", "norm", "parallelly", "parameters", "performance", "plotly", "pROC", "processx", "profvis", "ps", "RcppArmadillo", "recipes", "rgdal", "rgeos", "rlang", "rmarkdown", "s2", "sass", "scatterplot3d", "SimDesign", "sp", "statsExpressions", "survey", "sys", "testthat", "tinytex", "tzdb", "usethis", "vctrs", "viridis", "viridisLite", "vroom", "waldo", "wk", "xfun", "xml2", "xts", "zip", "zoo"))
install.packages(c("BiodiversityR", "broom", "bslib", "cachem", "checkmate", "clock", "curl", "DEoptimR", "dismo", "dplyr", "DT", "emmeans", "evaluate", "fontawesome", "fs", "future.apply", "gargle", "ggstatsplot", "googledrive", "googlesheets4", "Hmisc", "httpuv", "httr", "httr2", "igraph", "insight", "jsonlite", "knitr", "Lahman", "later", "lme4", "lwgeom", "markdown", "matrixStats", "mice", "mvtnorm", "norm", "parallelly", "parameters", "performance", "plotly", "pROC", "processx", "profvis", "ps", "RcppArmadillo", "recipes", "rgdal", "rgeos", "rlang", "rmarkdown", "s2", "sass", "scatterplot3d", "SimDesign", "sp", "statsExpressions", "survey", "sys", "testthat", "tinytex", "tzdb", "usethis", "vctrs", "viridis", "viridisLite", "vroom", "waldo", "wk", "xfun", "xml2", "xts", "zip", "zoo"))
install.packages(c("BiodiversityR", "broom", "bslib", "cachem", "checkmate", "clock", "curl", "DEoptimR", "dismo", "dplyr", "DT", "emmeans", "evaluate", "fontawesome", "fs", "future.apply", "gargle", "ggstatsplot", "googledrive", "googlesheets4", "Hmisc", "httpuv", "httr", "httr2", "igraph", "insight", "jsonlite", "knitr", "Lahman", "later", "lme4", "lwgeom", "markdown", "matrixStats", "mice", "mvtnorm", "norm", "parallelly", "parameters", "performance", "plotly", "pROC", "processx", "profvis", "ps", "RcppArmadillo", "recipes", "rgdal", "rgeos", "rlang", "rmarkdown", "s2", "sass", "scatterplot3d", "SimDesign", "sp", "statsExpressions", "survey", "sys", "testthat", "tinytex", "tzdb", "usethis", "vctrs", "viridis", "viridisLite", "vroom", "waldo", "wk", "xfun", "xml2", "xts", "zip", "zoo"))
library(tidyverse)
list.files()
data <- read.csv("bdmir.csv")
data <- read.csv("bdmir.csv")
head(data)
library(tidyverse)
data <- read.csv("bdmir.csv")
data <- read.csv("bdmir.csv")
data <- read.csv("bdmir.csv", fileEncoding = "UTF-8")
(tidyverse)
install.packages("tidyverse")
list.files()
library(tidyverse)
list.files()
data <- read.csv("bdmir.csv")
data <- read.csv("bdmir.csv", encoding = "UTF-8")
data <- read.csv("bdmir.csv", encoding = "latin1")
head(data)
anova <- data %>% select(data$MEDICAMENTO)
anova <- data %>% select(data$MEDICAMENTO, data$AÑOS.EVOLUCIÓN.DM)
anova <- data %>% select(MEDICAMENTO, AÑOS.EVOLUCIÓN.DM)
attach(anova)
names(anova)
class(MEDICAMENTO)
as.character(anova$MEDICAMENTO)
class(MEDICAMENTO)
class(anova$MEDICAMENTO)
as.character(anova$MEDICAMENTO)
class(anova$MEDICAMENTO)
as.character(MEDICAMENTO)
class(MEDICAMENTO)
MEDICAMENTO <- as.character(MEDICAMENTO)
class(MEDICAMENTO)
names(anova)
factor(MEDICAMENTO)
print(levels(MEDICAMENTO))
class(MEDICAMENTO)
print(levels(MEDICAMENTO))
factor(MEDICAMENTO)
levels(MEDICAMENTO) <- c("garbapentina", "pregabalina")
print(levels(MEDICAMENTO))
fator(MEDICAMENTO)
factor(MEDICAMENTO)
levels(MEDICAMENTO) <- c("garbapentina", "pregabalina")
print(levels(MEDICAMENTO))
factor(MEDICAMENTO)
factores_recodificados <- recode(factores, "1" = "garbapentina", "2" = "pregalabina")
factores_recodificados <- recode(MEDICAMENTO, "1" = "garbapentina", "2" = "pregalabina")
print(factores_recodificados)
summary(anova)
summary(MEDICAMENTO)
git init
git --version
git clone
setwd("C:/Users/erdav/Desktop/Diabetes")
list.files()
data <- read.csv("diabetes_prediction_dataset.csv")
head(data)
ggplot(df, aes(x = diabetes, y = bmi)) +
geom_boxplot() +
labs(title = "BMI vs Diabetes")
library(tidyverse)
ggplot(df, aes(x = diabetes, y = bmi)) +
geom_boxplot() +
labs(title = "BMI vs Diabetes")
data <- read.csv("diabetes_prediction_dataset.csv")
str(data)
ggplot(data, aes(x = diabetes, y = bmi)) +
geom_boxplot() +
labs(title = "BMI vs Diabetes")
ggplot(data, aes(x = factor(diabetes), y = bmi, group = diabetes)) +
geom_boxplot() +
labs(title = "BMI vs Diabetes")
ggplot(data, aes(x = factor(diabetes), y = bmi, group = diabetes)) +
geom_boxplot(fill = "green") +
labs(title = "BMI vs Diabetes") +
theme_minimal()
ggplot(data, aes(x = factor(diabetes), y = bmi, group = diabetes)) +
geom_boxplot(fill = "#00FF00") +
labs(title = "BMI vs Diabetes") +
theme_dark()
ggplot(data, aes(x = factor(diabetes), y = bmi, group = diabetes)) +
geom_boxplot(fill = "#00FF00") +
labs(title = "BMI vs Diabetes") +
theme_excel()
ggplot(data, aes(x = factor(diabetes), y = bmi, group = diabetes)) +
geom_boxplot(fill = "#00FF00") +
labs(title = "BMI vs Diabetes") +
theme_excel()
ggplot(data, aes(x = factor(diabetes), y = bmi, group = diabetes)) +
geom_boxplot(fill = "#00FF00") +
labs(title = "BMI vs Diabetes") +
theme_linedraw()
ggplot(data, aes(x = factor(diabetes), y = bmi, group = diabetes)) +
geom_boxplot(fill = "#00FF00") +
labs(title = "BMI vs Diabetes") +
theme_void()
ggplot(data, aes(x = factor(diabetes), y = bmi, group = diabetes)) +
geom_boxplot(fill = "#00FF00") +
labs(title = "BMI vs Diabetes") +
theme_bw()
ggplot(data, aes(x = factor(diabetes), y = bmi, group = diabetes)) +
geom_boxplot(fill = "#00FF00") +
labs(title = "BMI vs Diabetes") +
theme_economist()
ggplot(data, aes(x = factor(diabetes), y = bmi, group = diabetes)) +
geom_boxplot(fill = "#00FF00") +
labs(title = "BMI vs Diabetes") +
theme_minimal()
ggplot(data, aes(x = factor(diabetes), y = bmi, group = diabetes)) +
geom_boxplot(fill = "#00FF00") +
labs(title = "BMI vs Diabetes") +
theme_gray()
ggplot(data, aes(x = factor(diabetes), y = bmi, group = diabetes)) +
geom_boxplot(fill = "#00FF00") +
labs(title = "BMI vs Diabetes") +
theme_classic()
ggplot(data, aes(x = factor(diabetes), y = bmi, group = diabetes)) +
geom_boxplot(fill = "diabetes") +
labs(title = "BMI vs Diabetes") +
theme_classic()
ggplot(data, aes(x = factor(diabetes), y = bmi, group = diabetes)) +
geom_boxplot(fill = "orange") +
labs(title = "BMI vs Diabetes") +
theme_classic()
ggplot(data, aes(x = factor(diabetes), y = bmi, group = diabetes)) +
geom_boxplot() +
labs(title = "BMI vs Diabetes") +
theme_classic() +
scale_fill_manual(values = c("red", "blue"))
ggplot(data, aes(x = factor(diabetes), y = bmi, fill = factor(diabetes))) +
geom_boxplot() +
labs(title = "BMI vs Diabetes") +
theme_classic()
ggplot(data, aes(x = factor(diabetes), y = bmi, fill = factor(diabetes))) +
geom_boxplot() +
geom_jitter(width = 0.2, height = 0, color = "blue", alpha = 0.5) +
labs(title = "BMI vs Diabetes") +
theme_classic()
ggplot(data, aes(x = factor(diabetes), y = bmi, fill = factor(diabetes))) +
geom_jitter(width = 0.2, height = 0, color = "blue", alpha = 0.5) +
geom_boxplot() +
labs(title = "BMI vs Diabetes") +
theme_classic()
ggplot(data, aes(x = factor(diabetes), y = bmi, fill = factor(diabetes))) +
geom_jitter(width = 0.2, height = 0, color = "blue", alpha = 0.5) +
geom_boxplot(alpha =  + 0.5)
labs(title = "BMI vs Diabetes") +
theme_classic()
